import { api } from '@/src/api/client';

export interface Recommendation {
  area_recomendada: string;
  justificativa: string;
}

export interface RecommendationResponse {
  hasRecommendation: boolean;
  recommendation?: Recommendation;
  generatedAt?: string;
  message?: string;
  user?: {
    id: string;
    name: string;
  };
}

export interface GenerateRecommendationResponse {
  success: boolean;
  recommendation: Recommendation;
  transcriptionsAnalyzed: number;
  generatedAt: string;
  user: {
    id: string;
    name: string;
  };
}

export interface GenerateRecommendationError {
  error: string;
  nextAllowedAt?: string;
  details?: string;
}

/**
 * Busca a recomenda√ß√£o existente do usu√°rio
 */
export async function getRecommendation(userId: string): Promise<RecommendationResponse> {
  try {
    console.log(`üìä Buscando recomenda√ß√£o para usu√°rio: ${userId}`);
    
    const response = await api(`/users/${userId}/recommendation`, {
      timeout: 30000, // 30 segundos
    }) as RecommendationResponse;
    
    console.log(`‚úÖ Recomenda√ß√£o encontrada:`, response.hasRecommendation);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao buscar recomenda√ß√£o:', error);
    throw error;
  }
}

/**
 * Gera uma nova recomenda√ß√£o baseada nas transcri√ß√µes do usu√°rio
 */
export async function generateRecommendation(userId: string): Promise<GenerateRecommendationResponse> {
  try {
    console.log(`ü§ñ Gerando recomenda√ß√£o para usu√°rio: ${userId}`);
    
    const response = await api(`/users/${userId}/recommendation/generate`, {
      method: 'POST',
      body: {},
      timeout: 60000, // 60 segundos para gerar recomenda√ß√£o (pode demorar mais)
    }) as GenerateRecommendationResponse;
    
    console.log(`‚úÖ Recomenda√ß√£o gerada:`, response.recommendation.area_recomendada);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao gerar recomenda√ß√£o:', error);
    throw error;
  }
}

/**
 * Regenera a recomenda√ß√£o (para testes/admin)
 */
export async function regenerateRecommendation(userId: string): Promise<{ success: boolean; message: string }> {
  try {
    console.log(`üîÑ Regenerando recomenda√ß√£o para usu√°rio: ${userId}`);
    
    const response = await api(`/users/${userId}/recommendation/regenerate`, {
      method: 'POST',
      body: {},
      timeout: 60000, // 60 segundos
    }) as { success: boolean; message: string };
    
    console.log(`‚úÖ Recomenda√ß√£o resetada`);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao regenerar recomenda√ß√£o:', error);
    throw error;
  }
} 