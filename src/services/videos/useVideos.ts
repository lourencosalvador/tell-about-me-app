import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { uploadVideo, getUserVideos, deleteVideo } from './videos';
import { UserVideo } from '@/src/types';
import { router } from 'expo-router';

const VIDEOS_QUERY_KEY = 'videos';

// Hook para buscar v√≠deos do usu√°rio
export const useUserVideos = (userId: string) => {
  return useQuery({
    queryKey: [VIDEOS_QUERY_KEY, userId],
    queryFn: async () => {
      console.log('üîç Buscando v√≠deos para usu√°rio:', userId);
      const response = await getUserVideos(userId);
      console.log('üìπ V√≠deos recebidos:', response.videos);
      response.videos.forEach((video, index) => {
        console.log(`üìπ V√≠deo ${index + 1}:`, {
          id: video.id,
          url: video.url,
          hasUrl: !!video.url
        });
      });
      return response.videos;
    },
    enabled: !!userId, // S√≥ executa se tiver userId
    staleTime: 1000 * 60 * 3, // 3 minutos - v√≠deos n√£o mudam frequentemente
    gcTime: 1000 * 60 * 15, // 15 minutos - manter cache por mais tempo
    retry: (failureCount, error: any) => {
      // Retry mais espec√≠fico para timeout
      if (error?.message?.includes('Tempo limite')) {
        console.log('‚è∞ Timeout na busca de v√≠deos - fazendo retry');
        return failureCount < 2; // At√© 2 tentativas para timeout
      }
      // Para outros erros, usar configura√ß√£o padr√£o
      return failureCount < 3;
    },
    retryDelay: (attemptIndex) => {
      // Delay maior para v√≠deos j√° que podem ser requisi√ß√µes pesadas
      return Math.min(2000 * Math.pow(1.5, attemptIndex), 10000); // 2s, 3s, 4.5s, max 10s
    },
  });
};

// Hook para upload de v√≠deo
export const useUploadVideo = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: uploadVideo,
    onSuccess: (result, variables) => {
      console.log('‚úÖ Upload realizado com sucesso:', result);
      
      // Se conquistou streak, apenas loggar (navega√ß√£o √© feita pelo useStreakNavigation)
      if (result.success && result.data?.conquistouStreak) {
        console.log('üî• Streak conquistado! A navega√ß√£o ser√° feita automaticamente.');
        
        // For√ßar refetch do streak para atualizar imediatamente
        queryClient.invalidateQueries({ queryKey: ['userStreak'] });
      }
      
      // Invalidar e refetch a lista de v√≠deos do usu√°rio
      queryClient.invalidateQueries({ 
        queryKey: [VIDEOS_QUERY_KEY, variables.userId] 
      });
    },
    onError: (error) => {
      console.error('‚ùå Erro no upload:', error);
    },
  });
};

// Hook para deletar v√≠deo
export const useDeleteVideo = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: deleteVideo,
    onMutate: async (videoId) => {
      // Cancelar queries em andamento
      await queryClient.cancelQueries({ queryKey: [VIDEOS_QUERY_KEY] });

      // Snapshot do estado anterior
      const previousVideos = queryClient.getQueriesData({ 
        queryKey: [VIDEOS_QUERY_KEY] 
      });

      // Atualiza√ß√£o otimista - remove o v√≠deo imediatamente da UI
      queryClient.setQueriesData(
        { queryKey: [VIDEOS_QUERY_KEY] }, 
        (old: UserVideo[] | undefined) => {
          return old?.filter(video => video.id !== videoId) || [];
        }
      );

      return { previousVideos };
    },
    onError: (error, videoId, context) => {
      // Reverter em caso de erro
      if (context?.previousVideos) {
        context.previousVideos.forEach(([queryKey, data]) => {
          queryClient.setQueryData(queryKey, data);
        });
      }
      console.error('Erro ao deletar v√≠deo:', error);
    },
    onSettled: () => {
      // Sempre refetch ap√≥s completar
      queryClient.invalidateQueries({ queryKey: [VIDEOS_QUERY_KEY] });
    },
  });
};

// Hook para transcri√ß√£o de √°udio
export const useAudioTranscription = () => {
  return useMutation({
    mutationFn: async (audioFile: File) => {
      // Esta fun√ß√£o precisa ser implementada no novo service
      throw new Error('Fun√ß√£o de transcri√ß√£o ainda n√£o implementada');
    },
    onError: (error) => {
      console.error('Erro na transcri√ß√£o:', error);
    },
  });
};